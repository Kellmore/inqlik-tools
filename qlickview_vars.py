import sublime
import sublime_plugin
import os
import re
import xml.etree.ElementTree as etree
import csv
import sys
import datetime
from sublime import Region
from .util.qvvars import QlikViewCommandExpander
from .util.qvvars import QvVarFileReader


EXT_QLIKVIEW_VARS  = ".qlikview-vars"
class QlikviewVariableFileListener(sublime_plugin.EventListener):
    """Save variables in tabular format with extension EXT_QLIKVIEW_VARS_TABLE 
    along with current expression file in YAML like format (extentsion EXT_QLIKVIEW_VARS)

    Implements:
        on_post_save"""

    EXT_QLIKVIEW_VARS  = ".qlikview-vars"
    EXT_QLIKVIEW_VARS_TABLE = ".csv"
    EXT_QLIKVIEW_VARS_QVS = ".vars.qvs"
    ALLOWED_TAGS = ('Label','Comment', 'Definition','BackgroundColor','FontColor','TextFormat',
        'Tag','Separator','#define', 'Macro','Description','EnableCondition',
        'ShowCondition','SortBy','VisualCueUpper','VisualCueLower')
    FIELDS_TO_SKIP = ('Definition','Tag','SET','LET','command','name','separator','Macro','Description')
    NAME_MAP = {}

    line_template = re.compile(r'^(?P<key>\w+?):\s*(?P<val>.*)$')
    define_template = re.compile(r'^#define\s*(?P<key>\S+)\s+(?P<val>.*)$')
    param_template = re.compile(r'^\s*\-\s*(?P<val>.*)$')

    linenum = 0
    defs = {}
    macro = []
    output = []
    define_directives = {}
    moduleSettings = None
    reader = None
    def is_ST3(self):
        ''' check if ST3 based on python version '''
        version = sys.version_info
        if isinstance(version, tuple):
            version = version[0]
        elif getattr(version, 'major', None):
            version = version.major
        return (version >= 3)
    def on_post_save(self, view):
        fn = view.file_name()
        if (fn.endswith(self.EXT_QLIKVIEW_VARS)):
            self.moduleSettings = view.settings()
            self.reader = QvVarFileReader(self.moduleSettings)
            self.regenerate_expression_tab_file(view.file_name())

    def regenerate_tab_file_content(self,path, onload=False):
        (name, ext) = os.path.splitext(os.path.basename(path))
        f = None
        if self.is_ST3():
            f = open(path, 'r', encoding="utf-8")
        else:
            f = open(path, 'rb')
        read = f.read()
        f.close()
#        self.parse_expression_file(path, name, read)
        try:
            self.reader.parse_content(read)
        except Exception as e:
            msg  = isinstance(e, SyntaxError) and str(e) or "Error parsing QlikView expression "
            msg += " in file `%s` line: %d" % (path, self.linenum)
            if onload:
                # Sublime Text likes "hanging" itself when an error_message is pushed at initialization
                print("Error: " + msg)
            else:
                sublime.error_message(msg)
            if not isinstance(e, SyntaxError):
                print(e)  # print the error only if it's not raised intentionally
            return None
    def regenerate_expression_tab_file(self,path, onload=False, force=False):
        start = datetime.datetime.utcnow()
        qdf_output_mode = self.moduleSettings.get("output_mode","QDF") == "QDF"
        if qdf_output_mode:
            outExt = self.EXT_QLIKVIEW_VARS_TABLE
        else:
            outExt = self.EXT_QLIKVIEW_VARS_QVS
        outPath = path.replace(self.EXT_QLIKVIEW_VARS,outExt)
        self.regenerate_tab_file_content(path, onload=onload)
        f = None
        if self.is_ST3():
            if qdf_output_mode:
                enc = 'utf-8'
            else:
                enc = 'utf-8-sig'
            f = open(outPath, 'w', encoding=enc, newline='')
        else:
            f = open(outPath,'wb')

        if qdf_output_mode:
            writer = csv.writer(f)
            writer.writerow(['VariableName','VariableValue','Comments','Priority'])
            for row in self.reader.output:
                writer.writerow(['%s %s' % (row[0] , row[1]), row[2], row[3], row[4]])
        else:
            f.write('//////THIS IS AUTOGENERATED FILE. DO NOT EDIT IT DIRECTLY!!!!!!!!!!!!!\n\n')
            for row in self.reader.output:
                # comment = row[2]
                # if comment is None or comment.strip() == '':
                #     comment = ''    
                # else:
                #     comment = ' // ' + comment
                exp = row[2]
                if '$(' in exp:
                    command = 'LET'
                    exp = exp.replace("'","~~~")
                    exp = exp.replace("$(","@(")
                    exp = "replace(replace('%s','~~~', 'chr(39)'), '@(', chr(39) & '(')" % exp
                else:
                    command = row[0]
                varName = row[1]
                line = "%s %s = %s;\n" % (command,varName,exp) 
                f.write(line)
        f.close()
        print(' Saving elapsed: ' + str(datetime.datetime.utcnow()-start))

class QlikviewCheckVariablesCommand(sublime_plugin.TextCommand):
    moduleSettings = None
    edit = None
    path = ''
    reader = ''
    VAR_PATTERN = re.compile('\\$\\((?P<key>[^=]\\S+)\\)')
    def run(self, edit):
        self.edit = edit
        self.view = sublime.active_window().active_view()
        self.path = self.view.file_name()
        view = self.view
        fn = view.file_name()
        if fn is None:
            print ('Can not test unsaved document')
            return
        if not fn.lower().endswith(EXT_QLIKVIEW_VARS):
            return;
        self.moduleSettings = view.settings()
        syntax = self.moduleSettings.get('syntax')
        print(syntax)
        content = view.substr(Region(0,view.size()))
        reader = QvVarFileReader(self.moduleSettings)
        reader.parse_content(content)
        self.view = sublime.active_window().new_file()
        view = self.view
        view.set_scratch(True)
        (file_name, ext) = os.path.splitext(os.path.basename(fn))
        to_expand = []
        for row in reader.output:
            if not '.' in row[1]:
                to_expand.append([row[1],row[2]])
        expander = QlikViewCommandExpander(to_expand)
        expander.expand()
        self.add_line(file_name+'.qlikview-vars-expand')
        self.add_line('')
        self.output_expanded(expander)
        self.view.set_syntax_file(syntax)
        self.close_others(file_name+'.qlikview-vars-expand')

    def add_line(self,line):
        self.view.insert(self.edit, self.view.size(), line + '\n')
    def close_others(self,viewHeader):
        window = self.view.window()
        myId = self.view.id()
        for v in window.views():
            if v.id() == myId:
                continue
            l = v.line(sublime.Region(0,0))
            line = v.substr(l)
            if (line == viewHeader):
                window.focus_view(v)
                window.run_command('close')
                window.focus_view(self.view)
    def output_expanded(self,expander):
        for row in expander.output:
            self.add_line('---')
            self.add_line('LET: ' + row[0])
            self.add_line('Definition: '+ row[1])

